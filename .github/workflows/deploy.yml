name: Deploy to AWS Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_API_REPOSITORY: digital-pardna/api
  ECR_WEB_REPOSITORY: digital-pardna/web
  ECR_KEEPER_REPOSITORY: digital-pardna/keeper
  ECS_API_SERVICE: digital-pardna-api
  ECS_WEB_SERVICE: digital-pardna-web
  ECS_KEEPER_SERVICE: digital-pardna-keeper
  ECS_CLUSTER: digital-pardna-cluster
  API_CONTAINER_NAME: api
  WEB_CONTAINER_NAME: web
  KEEPER_CONTAINER_NAME: keeper

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run type checking
      run: pnpm type-check

    - name: Run linting
      run: pnpm lint

    - name: Run API tests
      run: pnpm test:api

    - name: Run Web tests
      run: pnpm test:web

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    name: Build and Deploy to AWS
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push API image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f apps/api/Dockerfile -t $ECR_REGISTRY/$ECR_API_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_API_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_API_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_API_REPOSITORY:latest

    - name: Build and push Web image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f apps/web/Dockerfile -t $ECR_REGISTRY/$ECR_WEB_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_WEB_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_WEB_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_WEB_REPOSITORY:latest

    - name: Build and push Keeper image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f apps/keeper/Dockerfile -t $ECR_REGISTRY/$ECR_KEEPER_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_KEEPER_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_KEEPER_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_KEEPER_REPOSITORY:latest

    - name: Download API task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_API_SERVICE }} --query taskDefinition > api-task-definition.json

    - name: Update API task definition
      id: api-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: api-task-definition.json
        container-name: ${{ env.API_CONTAINER_NAME }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_API_REPOSITORY }}:${{ github.sha }}

    - name: Deploy API to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.api-task-def.outputs.task-definition }}
        service: ${{ env.ECS_API_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Download Web task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_WEB_SERVICE }} --query taskDefinition > web-task-definition.json

    - name: Update Web task definition
      id: web-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: web-task-definition.json
        container-name: ${{ env.WEB_CONTAINER_NAME }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_WEB_REPOSITORY }}:${{ github.sha }}

    - name: Deploy Web to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.web-task-def.outputs.task-definition }}
        service: ${{ env.ECS_WEB_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Download Keeper task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_KEEPER_SERVICE }} --query taskDefinition > keeper-task-definition.json

    - name: Update Keeper task definition
      id: keeper-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: keeper-task-definition.json
        container-name: ${{ env.KEEPER_CONTAINER_NAME }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_KEEPER_REPOSITORY }}:${{ github.sha }}

    - name: Deploy Keeper to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.keeper-task-def.outputs.task-definition }}
        service: ${{ env.ECS_KEEPER_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Run database migrations
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Run Prisma migrations using the API container
        aws ecs run-task \
          --cluster ${{ env.ECS_CLUSTER }} \
          --task-definition ${{ env.ECS_API_SERVICE }} \
          --overrides '{
            "containerOverrides": [{
              "name": "${{ env.API_CONTAINER_NAME }}",
              "command": ["npx", "prisma", "migrate", "deploy"]
            }]
          }' \
          --launch-type FARGATE \
          --network-configuration 'awsvpcConfiguration={subnets=[subnet-xxx,subnet-yyy],securityGroups=[sg-xxx],assignPublicIp=DISABLED}'

    - name: Verify deployment
      run: |
        echo "Deployment completed successfully!"
        echo "API Health Check: https://yourdigitalpardna.com/v1/health"
        echo "Web Application: https://yourdigitalpardna.com"

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
    - name: Notify Slack on Success
      if: needs.build-and-deploy.result == 'success'
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: 'deployments'
        SLACK_COLOR: 'good'
        SLACK_MESSAGE: 'Digital Pardna production deployment successful! üöÄ'
        SLACK_TITLE: 'Production Deployment'
        SLACK_USERNAME: 'GitHub Actions'

    - name: Notify Slack on Failure
      if: needs.build-and-deploy.result == 'failure'
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: 'deployments'
        SLACK_COLOR: 'danger'
        SLACK_MESSAGE: 'Digital Pardna production deployment failed! ‚ùå'
        SLACK_TITLE: 'Production Deployment'
        SLACK_USERNAME: 'GitHub Actions'